[{"/Users/skylar/study/React/react-study/src/index.js":"1","/Users/skylar/study/React/react-study/src/App.js":"2","/Users/skylar/study/React/react-study/src/components/diaryEditor.jsx":"3","/Users/skylar/study/React/react-study/src/components/diaryList.jsx":"4","/Users/skylar/study/React/react-study/src/components/diaryItem.jsx":"5","/Users/skylar/study/React/react-study/src/components/Lifecycle.js":"6","/Users/skylar/study/React/react-study/src/components/OptimizeTest.jsx":"7"},{"size":428,"mtime":1647495525801,"results":"8","hashOfConfig":"9"},{"size":3097,"mtime":1647934712023,"results":"10","hashOfConfig":"9"},{"size":2204,"mtime":1647931214852,"results":"11","hashOfConfig":"9"},{"size":531,"mtime":1647830812292,"results":"12","hashOfConfig":"9"},{"size":2123,"mtime":1647933783208,"results":"13","hashOfConfig":"9"},{"size":749,"mtime":1647843334465,"results":"14","hashOfConfig":"9"},{"size":1227,"mtime":1647925755531,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"1uunc6a",{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"27"},"/Users/skylar/study/React/react-study/src/index.js",[],[],["42","43"],"/Users/skylar/study/React/react-study/src/App.js",["44"],[],"import { Fragment, useCallback, useEffect, useMemo, useRef, useState } from 'react'\nimport './App.css'\nimport DiaryEditor from './components/diaryEditor'\nimport DiaryList from './components/diaryList'\n\n// https://jsonplaceholder.typicode.com/comments\n\n//  fetch('https://jsonplaceholder.typicode.com/todos/1')\n// .then(response => response.json())\n// .then(json => console.log(json))\n\nconst App = () => {\n  const [data, setData] = useState([])\n\n  const dataId = useRef(0)\n\n  const getData = async () => {\n    const res = await fetch('https://jsonplaceholder.typicode.com/comments').then((res) => res.json())\n    console.log(res)\n\n    //data를 0~19까지 20개 가져온다.\n    const initData = res.slice(0, 20).map((item) => {\n      return {\n        author: item.email,\n        content: item.body,\n        emotion: '😆',\n        // emotion: Math.floor(Math.random()*5)+1\n        // Math.floor 소수점 이하 버림\n        // Math.random()*5 0~4까지 랜덤 숫자 발생\n        // (Math.random()*5)+1 1~5까지 랜덤 숫자 발생\n        created_date: new Date().getTime(),\n        id: dataId.current++,\n      }\n    })\n    setData(initData)\n  }\n\n  useEffect(() => {\n    getData()\n  }, [])\n\n  const onCreate = useCallback((author, content, emotion) => {\n    const created_date = new Date().getTime()\n    const newItem = {\n      author,\n      content,\n      emotion,\n      created_date,\n      id: dataId.current,\n    }\n    dataId.current += 1\n    setData((data) => [newItem, ...data])\n  }, [])\n\n  const onRemove = useCallback((targetId) => {\n    setData((data) => data.filter((item) => item.id !== targetId))\n  }, [])\n\n  const onEdit = useCallback((targetId, newContent) => {\n    // setData(data.map((item) => (item.id === targetId ? { ...item, content: newContent } : item)))\n    setData((data) => data.map((item) => (item.id === targetId ? { ...item, content: newContent } : item)))\n  }, [])\n\n  //useMemo()\n  //emotion을 emoji 문자열 타입으로 넣어서 아래 getDiaryAnalysis 함수는 제대로 작동하지 않는다.\n  const getDiaryAnalysis = useMemo(() => {\n    if (data.length === 0) {\n      return { goodcount: 0, badCount: 0, goodRatio: 0 }\n    }\n    console.log('일기 분석 시작')\n\n    const goodCount = data.filter((it) => it.emotion >= 3).length\n    const badCount = data.length - goodCount\n    const goodRatio = (goodCount / data.length) * 100.0\n    return { goodCount, badCount, goodRatio }\n  }, [data.length])\n\n  //useMemo를 사용하게 되면 getDiaryAnalysis는 함수가 아니라 값을 반환하게 된다.\n  //따라서 getDiaryAnalysis()로 호출하면 function이 아니라는 에러가 발생한다.\n  const { goodCount, badCount, goodRatio } = getDiaryAnalysis\n\n  return (\n    <Fragment>\n      <DiaryEditor onCreate={onCreate} />\n      <div>전체 일기: {data.length} 개</div>\n      <div>기분 좋은 날: {goodCount}</div>\n      <div>기분 나쁜 날: {badCount}</div>\n      <div>기분 좋은 날 비율: {goodRatio}</div>\n      <DiaryList diaryList={data} onRemove={onRemove} onEdit={onEdit} />\n    </Fragment>\n  )\n}\n\nexport default App\n","/Users/skylar/study/React/react-study/src/components/diaryEditor.jsx",[],[],["45","46"],"/Users/skylar/study/React/react-study/src/components/diaryList.jsx",[],[],["47","48"],"/Users/skylar/study/React/react-study/src/components/diaryItem.jsx",[],[],"/Users/skylar/study/React/react-study/src/components/Lifecycle.js",[],[],"/Users/skylar/study/React/react-study/src/components/OptimizeTest.jsx",["49"],[],"import React, { useEffect, useState } from 'react'\n\nconst CounterA = React.memo(({ count }) => {\n  useEffect(() => {\n    console.log(`CounterA updated count: ${count}`)\n  })\n  return <div>{count}</div>\n})\n\nconst CounterB = React.memo(({ obj }) => {\n  useEffect(() => {\n    console.log(`CounterB updated obj: ${obj}`)\n  })\n  return <div>{obj.count}</div>\n})\n\nconst areEqual = (prevProps, nextProps) => {\n  if (prevProps.obj.count === nextProps.obj.count) {\n    return true // preProps와 nextProps 값이 같으면 리렌더링 하지 않는다.\n  }\n  return false // preProps와 nextProps 값이 같으면 리렌더링 한다.\n}\n\nconst memoizeCounterB = React.memo(CounterB, areEqual)\n\nconst OptimizeTest = () => {\n  const [count, setCount] = useState(1)\n  const [obj, setObj] = useState({\n    count: 1,\n  })\n\n  return (\n    <div style={{ padding: '50px' }}>\n      <div>\n        <h2>counter A</h2>\n        <CounterA count={count} />\n        <button onClick={() => setCount(count)}>button A</button>\n      </div>\n      <div>\n        <h2>counter B</h2>\n        <memoizeCounterB obj={obj} />\n        <button onClick={() => setObj({ count: obj.count })}>button B</button>\n      </div>\n    </div>\n  )\n}\n\nexport default OptimizeTest\n",{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":76,"column":6,"nodeType":"56","endLine":76,"endColumn":19,"suggestions":"57"},{"ruleId":"50","replacedBy":"58"},{"ruleId":"52","replacedBy":"59"},{"ruleId":"50","replacedBy":"60"},{"ruleId":"52","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":24,"column":7,"nodeType":"64","messageId":"65","endLine":24,"endColumn":22},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"react-hooks/exhaustive-deps","React Hook useMemo has a missing dependency: 'data'. Either include it or remove the dependency array.","ArrayExpression",["68"],["66"],["67"],["66"],["67"],"no-unused-vars","'memoizeCounterB' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"69","fix":"70"},"Update the dependencies array to be: [data]",{"range":"71","text":"72"},[2306,2319],"[data]"]