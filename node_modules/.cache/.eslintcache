[{"/Users/skylar/study/React/react-study/src/index.js":"1","/Users/skylar/study/React/react-study/src/App.js":"2","/Users/skylar/study/React/react-study/src/components/diaryEditor.jsx":"3","/Users/skylar/study/React/react-study/src/components/diaryList.jsx":"4","/Users/skylar/study/React/react-study/src/components/diaryItem.jsx":"5","/Users/skylar/study/React/react-study/src/components/Lifecycle.js":"6","/Users/skylar/study/React/react-study/src/components/OptimizeTest.jsx":"7"},{"size":428,"mtime":1647495525801,"results":"8","hashOfConfig":"9"},{"size":3089,"mtime":1647918043759,"results":"10","hashOfConfig":"9"},{"size":2038,"mtime":1647830783037,"results":"11","hashOfConfig":"9"},{"size":531,"mtime":1647830812292,"results":"12","hashOfConfig":"9"},{"size":2026,"mtime":1647830888254,"results":"13","hashOfConfig":"9"},{"size":749,"mtime":1647843334465,"results":"14","hashOfConfig":"9"},{"size":848,"mtime":1647919355084,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"1uunc6a",{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/skylar/study/React/react-study/src/index.js",[],[],["41","42"],"/Users/skylar/study/React/react-study/src/App.js",["43"],[],"import { Fragment, useEffect, useMemo, useRef, useState } from 'react'\nimport './App.css'\nimport DiaryEditor from './components/diaryEditor'\nimport DiaryList from './components/diaryList'\nimport OptimizeTest from './components/OptimizeTest'\n\n// https://jsonplaceholder.typicode.com/comments\n\n//  fetch('https://jsonplaceholder.typicode.com/todos/1')\n// .then(response => response.json())\n// .then(json => console.log(json))\n\nconst App = () => {\n  const [data, setData] = useState([])\n\n  const dataId = useRef(0)\n\n  const getData = async () => {\n    const res = await fetch('https://jsonplaceholder.typicode.com/comments').then((res) => res.json())\n    console.log(res)\n\n    //data를 0~19까지 20개 가져온다.\n    const initData = res.slice(0, 20).map((item) => {\n      return {\n        author: item.email,\n        content: item.body,\n        emotion: '😆',\n        // emotion: Math.floor(Math.random()*5)+1\n        // Math.floor 소수점 이하 버림\n        // Math.random()*5 0~4까지 랜덤 숫자 발생\n        // (Math.random()*5)+1 1~5까지 랜덤 숫자 발생\n        created_date: new Date().getTime(),\n        id: dataId.current++,\n      }\n    })\n    setData(initData)\n  }\n\n  useEffect(() => {\n    getData()\n  }, [])\n\n  const onCreate = (author, content, emotion) => {\n    const created_date = new Date().getTime()\n    const newItem = {\n      author,\n      content,\n      emotion,\n      created_date,\n      id: dataId.current,\n    }\n    dataId.current += 1\n    setData([newItem, ...data])\n  }\n\n  const onRemove = (targetId) => {\n    console.log(`${targetId}가 삭제되었습니다.`)\n    const newDiaryList = data.filter((item) => item.id !== targetId)\n    console.log(newDiaryList)\n    setData(newDiaryList)\n  }\n\n  const onEdit = (targetId, newContent) => {\n    setData(data.map((item) => (item.id === targetId ? { ...item, content: newContent } : item)))\n  }\n\n  //emotion을 emoji 문자열 타입으로 넣어서 아래 getDiaryAnalysis 함수는 제대로 작동하지 않는다.\n  const getDiaryAnalysis = useMemo(() => {\n    if (data.length === 0) {\n      return { goodcount: 0, badCount: 0, goodRatio: 0 }\n    }\n    console.log('일기 분석 시작')\n\n    const goodCount = data.filter((it) => it.emotion >= 3).length\n    const badCount = data.length - goodCount\n    const goodRatio = (goodCount / data.length) * 100.0\n    return { goodCount, badCount, goodRatio }\n  }, [data.length])\n\n  //useMemo를 사용하게 되면 getDiaryAnalysis는 함수가 아니라 값을 반환하게 된다.\n  //따라서 getDiaryAnalysis()로 호출하면 function이 아니라는 에러가 발생한다.\n  const { goodCount, badCount, goodRatio } = getDiaryAnalysis\n\n  return (\n    <Fragment>\n      <OptimizeTest />\n      <DiaryEditor onCreate={onCreate} />\n      <div>전체 일기: {data.length} 개</div>\n      <div>기분 좋은 날: {goodCount}</div>\n      <div>기분 나쁜 날: {badCount}</div>\n      <div>기분 좋은 날 비율: {goodRatio}</div>\n      <DiaryList diaryList={data} onRemove={onRemove} onEdit={onEdit} />\n    </Fragment>\n  )\n}\n\nexport default App\n",["44","45"],"/Users/skylar/study/React/react-study/src/components/diaryEditor.jsx",[],[],["46","47"],"/Users/skylar/study/React/react-study/src/components/diaryList.jsx",[],[],"/Users/skylar/study/React/react-study/src/components/diaryItem.jsx",[],[],"/Users/skylar/study/React/react-study/src/components/Lifecycle.js",[],[],"/Users/skylar/study/React/react-study/src/components/OptimizeTest.jsx",[],[],{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":78,"column":6,"nodeType":"54","endLine":78,"endColumn":19,"suggestions":"55"},{"ruleId":"48","replacedBy":"56"},{"ruleId":"50","replacedBy":"57"},{"ruleId":"48","replacedBy":"58"},{"ruleId":"50","replacedBy":"59"},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"react-hooks/exhaustive-deps","React Hook useMemo has a missing dependency: 'data'. Either include it or remove the dependency array.","ArrayExpression",["62"],["60"],["61"],["60"],["61"],"no-global-assign","no-unsafe-negation",{"desc":"63","fix":"64"},"Update the dependencies array to be: [data]",{"range":"65","text":"66"},[2259,2272],"[data]"]