[{"/Users/skylar/study/React/react-study/src/index.js":"1","/Users/skylar/study/React/react-study/src/App.js":"2","/Users/skylar/study/React/react-study/src/components/diaryEditor.jsx":"3","/Users/skylar/study/React/react-study/src/components/diaryList.jsx":"4","/Users/skylar/study/React/react-study/src/components/diaryItem.jsx":"5","/Users/skylar/study/React/react-study/src/components/Lifecycle.js":"6"},{"size":428,"mtime":1647495525801,"results":"7","hashOfConfig":"8"},{"size":3783,"mtime":1647997070316,"results":"9","hashOfConfig":"8"},{"size":2307,"mtime":1647997341640,"results":"10","hashOfConfig":"8"},{"size":729,"mtime":1647997732617,"results":"11","hashOfConfig":"8"},{"size":2228,"mtime":1647997940562,"results":"12","hashOfConfig":"8"},{"size":749,"mtime":1647843334465,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},"1uunc6a",{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"/Users/skylar/study/React/react-study/src/index.js",[],[],["37","38"],"/Users/skylar/study/React/react-study/src/App.js",["39","40"],[],"import { createContext, useCallback, useEffect, useMemo, useReducer, useRef } from 'react'\nimport './App.css'\nimport DiaryEditor from './components/diaryEditor'\nimport DiaryList from './components/diaryList'\n\n// https://jsonplaceholder.typicode.com/comments\n\n//  fetch('https://jsonplaceholder.typicode.com/todos/1')\n// .then(response => response.json())\n// .then(json => console.log(json))\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'INIT': {\n      return action.data\n    }\n\n    case 'CREATE': {\n      const created_date = new Date().getTime()\n      const newItem = {\n        ...action.data,\n        created_date,\n      }\n      return [newItem, ...state]\n    }\n    case 'REMOVE': {\n      return state.filter((item) => item.id !== action.targetId)\n    }\n    case 'EDIT': {\n      return state.map((item) => (item.id === action.targetId ? { ...item, content: action.newContent } : item))\n    }\n    default:\n      return state\n  }\n}\n\nexport const DiaryStateContext = createContext()\nexport const DiaryDispatchContext = createContext()\n\nconst App = () => {\n  const [data, dispatch] = useReducer(reducer, [])\n\n  const dataId = useRef(0)\n\n  const getData = async () => {\n    const res = await fetch('https://jsonplaceholder.typicode.com/comments').then((res) => res.json())\n    console.log(res)\n\n    //data를 0~19까지 20개 가져온다.\n    const initData = res.slice(0, 20).map((item) => {\n      return {\n        author: item.email,\n        content: item.body,\n        emotion: '😆',\n        // emotion: Math.floor(Math.random()*5)+1\n        // Math.floor 소수점 이하 버림\n        // Math.random()*5 0~4까지 랜덤 숫자 발생\n        // (Math.random()*5)+1 1~5까지 랜덤 숫자 발생\n        created_date: new Date().getTime(),\n        id: dataId.current++,\n      }\n    })\n    dispatch({ type: 'INIT', data: initData })\n  }\n\n  useEffect(() => {\n    getData()\n  }, [])\n\n  const onCreate = useCallback((author, content, emotion) => {\n    dispatch({\n      type: 'CREATE',\n      data: {\n        author,\n        content,\n        emotion,\n        id: dataId.current,\n      },\n    })\n\n    dataId.current += 1\n  }, [])\n\n  const onRemove = useCallback((targetId) => {\n    dispatch({ type: 'REMOVE', targetId })\n  }, [])\n\n  const onEdit = useCallback((targetId, newContent) => {\n    dispatch({\n      type: 'EDIT',\n      targetId,\n      newContent,\n    })\n  }, [])\n\n  const memoizedDispatches = useMemo(() => {\n    return { onCreate, onRemove, onEdit }\n  }, [])\n\n  //useMemo()\n  //emotion을 emoji 문자열 타입으로 넣어서 아래 getDiaryAnalysis 함수는 제대로 작동하지 않는다.\n  const getDiaryAnalysis = useMemo(() => {\n    if (data.length === 0) {\n      return { goodcount: 0, badCount: 0, goodRatio: 0 }\n    }\n    console.log('일기 분석 시작')\n\n    const goodCount = data.filter((it) => it.emotion >= 3).length\n    const badCount = data.length - goodCount\n    const goodRatio = (goodCount / data.length) * 100.0\n    return { goodCount, badCount, goodRatio }\n  }, [data.length])\n\n  //useMemo를 사용하게 되면 getDiaryAnalysis는 함수가 아니라 값을 반환하게 된다.\n  //따라서 getDiaryAnalysis()로 호출하면 function이 아니라는 에러가 발생한다.\n  const { goodCount, badCount, goodRatio } = getDiaryAnalysis\n\n  return (\n    <DiaryStateContext.Provider value={data}>\n      <DiaryDispatchContext.Provider value={memoizedDispatches}>\n        <DiaryEditor />\n        <div>전체 일기: {data.length} 개</div>\n        <div>기분 좋은 날: {goodCount}</div>\n        <div>기분 나쁜 날: {badCount}</div>\n        <div>기분 좋은 날 비율: {goodRatio}</div>\n        <DiaryList />\n      </DiaryDispatchContext.Provider>\n    </DiaryStateContext.Provider>\n  )\n}\n\nexport default App\n",["41","42"],"/Users/skylar/study/React/react-study/src/components/diaryEditor.jsx",[],[],"/Users/skylar/study/React/react-study/src/components/diaryList.jsx",["43"],[],"import React, { useContext } from 'react'\nimport { DiaryStateContext } from '../App'\nimport DiaryItem from './diaryItem'\n\n// App.js에서 prop으로 받아 온 diaryList는 data state의 값이다.\n// createContext로 data state를 넘겨 받았으므로 더이상 props로 받아 올 필요 없다.\n\nconst DiaryList = ({}) => {\n  const diaryList = useContext(DiaryStateContext)\n\n  return (\n    <div className=\"DiaryList\">\n      <h2>Diary List</h2>\n      <h4>{diaryList.length} 개의 일기가 있습니다.</h4>\n      <div>\n        {diaryList.map((item, index) => (\n          <DiaryItem key={index} {...item} />\n        ))}\n      </div>\n    </div>\n  )\n}\n\nDiaryList.defaultProps = {\n  diaryList: [],\n}\n\nexport default DiaryList\n","/Users/skylar/study/React/react-study/src/components/diaryItem.jsx",[],[],"/Users/skylar/study/React/react-study/src/components/Lifecycle.js",[],[],["44","45"],{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":98,"column":6,"nodeType":"52","endLine":98,"endColumn":8,"suggestions":"53"},{"ruleId":"50","severity":1,"message":"54","line":112,"column":6,"nodeType":"52","endLine":112,"endColumn":19,"suggestions":"55"},{"ruleId":"46","replacedBy":"56"},{"ruleId":"48","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":8,"column":20,"nodeType":"60","messageId":"61","endLine":8,"endColumn":22},{"ruleId":"46","replacedBy":"62"},{"ruleId":"48","replacedBy":"63"},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"react-hooks/exhaustive-deps","React Hook useMemo has missing dependencies: 'onCreate', 'onEdit', and 'onRemove'. Either include them or remove the dependency array.","ArrayExpression",["66"],"React Hook useMemo has a missing dependency: 'data'. Either include it or remove the dependency array.",["67"],["64"],["65"],"no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected",["64"],["65"],"no-global-assign","no-unsafe-negation",{"desc":"68","fix":"69"},{"desc":"70","fix":"71"},"Update the dependencies array to be: [onCreate, onEdit, onRemove]",{"range":"72","text":"73"},"Update the dependencies array to be: [data]",{"range":"74","text":"75"},[2429,2431],"[onCreate, onEdit, onRemove]",[2900,2913],"[data]"]