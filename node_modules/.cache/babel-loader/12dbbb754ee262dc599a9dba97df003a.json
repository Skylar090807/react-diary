{"ast":null,"code":"var _jsxFileName = \"/Users/skylar/study/React/react-study/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useRef, useState } from 'react';\nimport './App.css';\nimport DiaryEditor from './components/diaryEditor';\nimport DiaryList from './components/diaryList'; // https://jsonplaceholder.typicode.com/comments\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [data, setData] = useState([]);\n  const dataId = useRef(0);\n\n  const getData = () => {\n    fetch('https://jsonplaceholder.typicode.com/comments').then(response => response.json()).then(json => console.log(json));\n  };\n\n  const onCreate = (author, content, emotion) => {\n    const created_date = new Date().getTime();\n    const newItem = {\n      author,\n      content,\n      emotion,\n      created_date,\n      id: dataId.current\n    };\n    dataId.current += 1;\n    setData([newItem, ...data]);\n  };\n\n  const onRemove = targetId => {\n    console.log(`${targetId}가 삭제되었습니다.`);\n    const newDiaryList = data.filter(item => item.id !== targetId);\n    console.log(newDiaryList);\n    setData(newDiaryList);\n  };\n\n  const onEdit = (targetId, newContent) => {\n    setData(data.map(item => item.id === targetId ? { ...item,\n      content: newContent\n    } : item));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(DiaryEditor, {\n      onCreate: onCreate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DiaryList, {\n      diaryList: data,\n      onRemove: onRemove,\n      onEdit: onEdit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"PSh4R9M9XXzghkCT8iIKMDh9kfM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/skylar/study/React/react-study/src/App.js"],"names":["Fragment","useRef","useState","DiaryEditor","DiaryList","App","data","setData","dataId","getData","fetch","then","response","json","console","log","onCreate","author","content","emotion","created_date","Date","getTime","newItem","id","current","onRemove","targetId","newDiaryList","filter","item","onEdit","newContent","map"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,MAAnB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,WAAP;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,SAAP,MAAsB,wBAAtB,C,CAEA;;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,EAAD,CAAhC;AAEA,QAAMM,MAAM,GAAGP,MAAM,CAAC,CAAD,CAArB;;AAEA,QAAMQ,OAAO,GAAG,MAAM;AACpBC,IAAAA,KAAK,CAAC,+CAAD,CAAL,CACGC,IADH,CACSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADtB,EAEGF,IAFH,CAESE,IAAD,IAAUC,OAAO,CAACC,GAAR,CAAYF,IAAZ,CAFlB;AAGD,GAJD;;AAMA,QAAMG,QAAQ,GAAG,CAACC,MAAD,EAASC,OAAT,EAAkBC,OAAlB,KAA8B;AAC7C,UAAMC,YAAY,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAArB;AACA,UAAMC,OAAO,GAAG;AACdN,MAAAA,MADc;AAEdC,MAAAA,OAFc;AAGdC,MAAAA,OAHc;AAIdC,MAAAA,YAJc;AAKdI,MAAAA,EAAE,EAAEhB,MAAM,CAACiB;AALG,KAAhB;AAOAjB,IAAAA,MAAM,CAACiB,OAAP,IAAkB,CAAlB;AACAlB,IAAAA,OAAO,CAAC,CAACgB,OAAD,EAAU,GAAGjB,IAAb,CAAD,CAAP;AACD,GAXD;;AAaA,QAAMoB,QAAQ,GAAIC,QAAD,IAAc;AAC7Bb,IAAAA,OAAO,CAACC,GAAR,CAAa,GAAEY,QAAS,YAAxB;AACA,UAAMC,YAAY,GAAGtB,IAAI,CAACuB,MAAL,CAAaC,IAAD,IAAUA,IAAI,CAACN,EAAL,KAAYG,QAAlC,CAArB;AACAb,IAAAA,OAAO,CAACC,GAAR,CAAYa,YAAZ;AACArB,IAAAA,OAAO,CAACqB,YAAD,CAAP;AACD,GALD;;AAOA,QAAMG,MAAM,GAAG,CAACJ,QAAD,EAAWK,UAAX,KAA0B;AACvCzB,IAAAA,OAAO,CAACD,IAAI,CAAC2B,GAAL,CAAUH,IAAD,IAAWA,IAAI,CAACN,EAAL,KAAYG,QAAZ,GAAuB,EAAE,GAAGG,IAAL;AAAWZ,MAAAA,OAAO,EAAEc;AAApB,KAAvB,GAA0DF,IAA9E,CAAD,CAAP;AACD,GAFD;;AAIA,sBACE,QAAC,QAAD;AAAA,4BACE,QAAC,WAAD;AAAa,MAAA,QAAQ,EAAEd;AAAvB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,SAAD;AAAW,MAAA,SAAS,EAAEV,IAAtB;AAA4B,MAAA,QAAQ,EAAEoB,QAAtC;AAAgD,MAAA,MAAM,EAAEK;AAAxD;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CAzCD;;GAAM1B,G;;KAAAA,G;AA2CN,eAAeA,GAAf","sourcesContent":["import { Fragment, useRef, useState } from 'react'\nimport './App.css'\nimport DiaryEditor from './components/diaryEditor'\nimport DiaryList from './components/diaryList'\n\n// https://jsonplaceholder.typicode.com/comments\n\nconst App = () => {\n  const [data, setData] = useState([])\n\n  const dataId = useRef(0)\n\n  const getData = () => {\n    fetch('https://jsonplaceholder.typicode.com/comments')\n      .then((response) => response.json())\n      .then((json) => console.log(json))\n  }\n\n  const onCreate = (author, content, emotion) => {\n    const created_date = new Date().getTime()\n    const newItem = {\n      author,\n      content,\n      emotion,\n      created_date,\n      id: dataId.current,\n    }\n    dataId.current += 1\n    setData([newItem, ...data])\n  }\n\n  const onRemove = (targetId) => {\n    console.log(`${targetId}가 삭제되었습니다.`)\n    const newDiaryList = data.filter((item) => item.id !== targetId)\n    console.log(newDiaryList)\n    setData(newDiaryList)\n  }\n\n  const onEdit = (targetId, newContent) => {\n    setData(data.map((item) => (item.id === targetId ? { ...item, content: newContent } : item)))\n  }\n\n  return (\n    <Fragment>\n      <DiaryEditor onCreate={onCreate} />\n      <DiaryList diaryList={data} onRemove={onRemove} onEdit={onEdit} />\n    </Fragment>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}