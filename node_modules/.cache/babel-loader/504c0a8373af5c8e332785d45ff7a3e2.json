{"ast":null,"code":"var _jsxFileName = \"/Users/skylar/study/React/react-study/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useEffect, useRef, useState } from 'react';\nimport './App.css';\nimport DiaryEditor from './components/diaryEditor';\nimport DiaryList from './components/diaryList'; // https://jsonplaceholder.typicode.com/comments\n//  fetch('https://jsonplaceholder.typicode.com/todos/1')\n// .then(response => response.json())\n// .then(json => console.log(json))\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [data, setData] = useState([]);\n  const dataId = useRef(0);\n\n  const getData = async () => {\n    const res = await fetch('https://jsonplaceholder.typicode.com/comments').then(res => res.json());\n    console.log(res);\n    const initData = res.slice(0, 20).map(item => {\n      return {\n        author: item.email,\n        content: item.body,\n        emotion: '😆' // emotion: Math.floor(Math.random()*5)+1\n        // Math.floor 소수점 이하 버림\n        // Math.random()*5 0~4까지 랜덤 숫자 발생\n        // (Math.random()*5)+1 1~5까지 랜덤 숫자 발생\n\n      };\n    });\n  };\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const onCreate = (author, content, emotion) => {\n    const created_date = new Date().getTime();\n    const newItem = {\n      author,\n      content,\n      emotion,\n      created_date,\n      id: dataId.current\n    };\n    dataId.current += 1;\n    setData([newItem, ...data]);\n  };\n\n  const onRemove = targetId => {\n    console.log(`${targetId}가 삭제되었습니다.`);\n    const newDiaryList = data.filter(item => item.id !== targetId);\n    console.log(newDiaryList);\n    setData(newDiaryList);\n  };\n\n  const onEdit = (targetId, newContent) => {\n    setData(data.map(item => item.id === targetId ? { ...item,\n      content: newContent\n    } : item));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(DiaryEditor, {\n      onCreate: onCreate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DiaryList, {\n      diaryList: data,\n      onRemove: onRemove,\n      onEdit: onEdit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"2o8Xchl1A9LFe9GiqWSSYkjxPVs=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/skylar/study/React/react-study/src/App.js"],"names":["Fragment","useEffect","useRef","useState","DiaryEditor","DiaryList","App","data","setData","dataId","getData","res","fetch","then","json","console","log","initData","slice","map","item","author","email","content","body","emotion","onCreate","created_date","Date","getTime","newItem","id","current","onRemove","targetId","newDiaryList","filter","onEdit","newContent"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,EAAsCC,QAAtC,QAAsD,OAAtD;AACA,OAAO,WAAP;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,SAAP,MAAsB,wBAAtB,C,CAEA;AAEA;AACA;AACA;;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,EAAD,CAAhC;AAEA,QAAMM,MAAM,GAAGP,MAAM,CAAC,CAAD,CAArB;;AAEA,QAAMQ,OAAO,GAAG,YAAY;AAC1B,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,+CAAD,CAAL,CAAuDC,IAAvD,CAA6DF,GAAD,IAASA,GAAG,CAACG,IAAJ,EAArE,CAAlB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,GAAZ;AAEA,UAAMM,QAAQ,GAAGN,GAAG,CAACO,KAAJ,CAAU,CAAV,EAAa,EAAb,EAAiBC,GAAjB,CAAsBC,IAAD,IAAU;AAC9C,aAAO;AACLC,QAAAA,MAAM,EAAED,IAAI,CAACE,KADR;AAELC,QAAAA,OAAO,EAAEH,IAAI,CAACI,IAFT;AAGLC,QAAAA,OAAO,EAAE,IAHJ,CAIL;AACA;AACA;AACA;;AAPK,OAAP;AASD,KAVgB,CAAjB;AAWD,GAfD;;AAiBAxB,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,OAAO;AACR,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMgB,QAAQ,GAAG,CAACL,MAAD,EAASE,OAAT,EAAkBE,OAAlB,KAA8B;AAC7C,UAAME,YAAY,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAArB;AACA,UAAMC,OAAO,GAAG;AACdT,MAAAA,MADc;AAEdE,MAAAA,OAFc;AAGdE,MAAAA,OAHc;AAIdE,MAAAA,YAJc;AAKdI,MAAAA,EAAE,EAAEtB,MAAM,CAACuB;AALG,KAAhB;AAOAvB,IAAAA,MAAM,CAACuB,OAAP,IAAkB,CAAlB;AACAxB,IAAAA,OAAO,CAAC,CAACsB,OAAD,EAAU,GAAGvB,IAAb,CAAD,CAAP;AACD,GAXD;;AAaA,QAAM0B,QAAQ,GAAIC,QAAD,IAAc;AAC7BnB,IAAAA,OAAO,CAACC,GAAR,CAAa,GAAEkB,QAAS,YAAxB;AACA,UAAMC,YAAY,GAAG5B,IAAI,CAAC6B,MAAL,CAAahB,IAAD,IAAUA,IAAI,CAACW,EAAL,KAAYG,QAAlC,CAArB;AACAnB,IAAAA,OAAO,CAACC,GAAR,CAAYmB,YAAZ;AACA3B,IAAAA,OAAO,CAAC2B,YAAD,CAAP;AACD,GALD;;AAOA,QAAME,MAAM,GAAG,CAACH,QAAD,EAAWI,UAAX,KAA0B;AACvC9B,IAAAA,OAAO,CAACD,IAAI,CAACY,GAAL,CAAUC,IAAD,IAAWA,IAAI,CAACW,EAAL,KAAYG,QAAZ,GAAuB,EAAE,GAAGd,IAAL;AAAWG,MAAAA,OAAO,EAAEe;AAApB,KAAvB,GAA0DlB,IAA9E,CAAD,CAAP;AACD,GAFD;;AAIA,sBACE,QAAC,QAAD;AAAA,4BACE,QAAC,WAAD;AAAa,MAAA,QAAQ,EAAEM;AAAvB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,SAAD;AAAW,MAAA,SAAS,EAAEnB,IAAtB;AAA4B,MAAA,QAAQ,EAAE0B,QAAtC;AAAgD,MAAA,MAAM,EAAEI;AAAxD;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CAxDD;;GAAM/B,G;;KAAAA,G;AA0DN,eAAeA,GAAf","sourcesContent":["import { Fragment, useEffect, useRef, useState } from 'react'\nimport './App.css'\nimport DiaryEditor from './components/diaryEditor'\nimport DiaryList from './components/diaryList'\n\n// https://jsonplaceholder.typicode.com/comments\n\n//  fetch('https://jsonplaceholder.typicode.com/todos/1')\n// .then(response => response.json())\n// .then(json => console.log(json))\n\nconst App = () => {\n  const [data, setData] = useState([])\n\n  const dataId = useRef(0)\n\n  const getData = async () => {\n    const res = await fetch('https://jsonplaceholder.typicode.com/comments').then((res) => res.json())\n    console.log(res)\n\n    const initData = res.slice(0, 20).map((item) => {\n      return {\n        author: item.email,\n        content: item.body,\n        emotion: '😆',\n        // emotion: Math.floor(Math.random()*5)+1\n        // Math.floor 소수점 이하 버림\n        // Math.random()*5 0~4까지 랜덤 숫자 발생\n        // (Math.random()*5)+1 1~5까지 랜덤 숫자 발생\n      }\n    })\n  }\n\n  useEffect(() => {\n    getData()\n  }, [])\n\n  const onCreate = (author, content, emotion) => {\n    const created_date = new Date().getTime()\n    const newItem = {\n      author,\n      content,\n      emotion,\n      created_date,\n      id: dataId.current,\n    }\n    dataId.current += 1\n    setData([newItem, ...data])\n  }\n\n  const onRemove = (targetId) => {\n    console.log(`${targetId}가 삭제되었습니다.`)\n    const newDiaryList = data.filter((item) => item.id !== targetId)\n    console.log(newDiaryList)\n    setData(newDiaryList)\n  }\n\n  const onEdit = (targetId, newContent) => {\n    setData(data.map((item) => (item.id === targetId ? { ...item, content: newContent } : item)))\n  }\n\n  return (\n    <Fragment>\n      <DiaryEditor onCreate={onCreate} />\n      <DiaryList diaryList={data} onRemove={onRemove} onEdit={onEdit} />\n    </Fragment>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}