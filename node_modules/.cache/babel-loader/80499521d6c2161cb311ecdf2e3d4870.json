{"ast":null,"code":"var _jsxFileName = \"/Users/skylar/study/React/react-study/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport './App.css';\nimport DiaryEditor from './components/diaryEditor';\nimport DiaryList from './components/diaryList'; // https://jsonplaceholder.typicode.com/comments\n//  fetch('https://jsonplaceholder.typicode.com/todos/1')\n// .then(response => response.json())\n// .then(json => console.log(json))\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [data, setData] = useState([]);\n  const dataId = useRef(0);\n\n  const getData = async () => {\n    const res = await fetch('https://jsonplaceholder.typicode.com/comments').then(res => res.json());\n    console.log(res); //data를 0~19까지 20개 가져온다.\n\n    const initData = res.slice(0, 20).map(item => {\n      return {\n        author: item.email,\n        content: item.body,\n        emotion: '😆',\n        // emotion: Math.floor(Math.random()*5)+1\n        // Math.floor 소수점 이하 버림\n        // Math.random()*5 0~4까지 랜덤 숫자 발생\n        // (Math.random()*5)+1 1~5까지 랜덤 숫자 발생\n        created_date: new Date().getTime(),\n        id: dataId.current++\n      };\n    });\n    setData(initData);\n  };\n\n  useEffect(() => {\n    getData();\n  }, []);\n  const onCreate = useCallback((author, content, emotion) => {\n    const created_date = new Date().getTime();\n    const newItem = {\n      author,\n      content,\n      emotion,\n      created_date,\n      id: dataId.current\n    };\n    dataId.current += 1;\n    setData(data => [newItem, ...data]);\n  }, []);\n\n  const onRemove = targetId => {\n    console.log(`${targetId}가 삭제되었습니다.`);\n    const newDiaryList = data.filter(item => item.id !== targetId);\n    console.log(newDiaryList);\n    setData(newDiaryList);\n  };\n\n  const onEdit = (targetId, newContent) => {\n    setData(data.map(item => item.id === targetId ? { ...item,\n      content: newContent\n    } : item));\n  }; //useMemo()\n  //emotion을 emoji 문자열 타입으로 넣어서 아래 getDiaryAnalysis 함수는 제대로 작동하지 않는다.\n\n\n  const getDiaryAnalysis = useMemo(() => {\n    if (data.length === 0) {\n      return {\n        goodcount: 0,\n        badCount: 0,\n        goodRatio: 0\n      };\n    }\n\n    console.log('일기 분석 시작');\n    const goodCount = data.filter(it => it.emotion >= 3).length;\n    const badCount = data.length - goodCount;\n    const goodRatio = goodCount / data.length * 100.0;\n    return {\n      goodCount,\n      badCount,\n      goodRatio\n    };\n  }, [data.length]); //useMemo를 사용하게 되면 getDiaryAnalysis는 함수가 아니라 값을 반환하게 된다.\n  //따라서 getDiaryAnalysis()로 호출하면 function이 아니라는 에러가 발생한다.\n\n  const {\n    goodCount,\n    badCount,\n    goodRatio\n  } = getDiaryAnalysis;\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(DiaryEditor, {\n      onCreate: onCreate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"\\uC804\\uCCB4 \\uC77C\\uAE30: \", data.length, \" \\uAC1C\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"\\uAE30\\uBD84 \\uC88B\\uC740 \\uB0A0: \", goodCount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"\\uAE30\\uBD84 \\uB098\\uC05C \\uB0A0: \", badCount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"\\uAE30\\uBD84 \\uC88B\\uC740 \\uB0A0 \\uBE44\\uC728: \", goodRatio]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DiaryList, {\n      diaryList: data,\n      onRemove: onRemove,\n      onEdit: onEdit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"3YBd0oqU37tixS4Voa50kGmXzOk=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/skylar/study/React/react-study/src/App.js"],"names":["Fragment","useCallback","useEffect","useMemo","useRef","useState","DiaryEditor","DiaryList","App","data","setData","dataId","getData","res","fetch","then","json","console","log","initData","slice","map","item","author","email","content","body","emotion","created_date","Date","getTime","id","current","onCreate","newItem","onRemove","targetId","newDiaryList","filter","onEdit","newContent","getDiaryAnalysis","length","goodcount","badCount","goodRatio","goodCount","it"],"mappings":"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","sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useRef, useState } from 'react'\nimport './App.css'\nimport DiaryEditor from './components/diaryEditor'\nimport DiaryList from './components/diaryList'\n\n// https://jsonplaceholder.typicode.com/comments\n\n//  fetch('https://jsonplaceholder.typicode.com/todos/1')\n// .then(response => response.json())\n// .then(json => console.log(json))\n\nconst App = () => {\n  const [data, setData] = useState([])\n\n  const dataId = useRef(0)\n\n  const getData = async () => {\n    const res = await fetch('https://jsonplaceholder.typicode.com/comments').then((res) => res.json())\n    console.log(res)\n\n    //data를 0~19까지 20개 가져온다.\n    const initData = res.slice(0, 20).map((item) => {\n      return {\n        author: item.email,\n        content: item.body,\n        emotion: '😆',\n        // emotion: Math.floor(Math.random()*5)+1\n        // Math.floor 소수점 이하 버림\n        // Math.random()*5 0~4까지 랜덤 숫자 발생\n        // (Math.random()*5)+1 1~5까지 랜덤 숫자 발생\n        created_date: new Date().getTime(),\n        id: dataId.current++,\n      }\n    })\n    setData(initData)\n  }\n\n  useEffect(() => {\n    getData()\n  }, [])\n\n  const onCreate = useCallback((author, content, emotion) => {\n    const created_date = new Date().getTime()\n    const newItem = {\n      author,\n      content,\n      emotion,\n      created_date,\n      id: dataId.current,\n    }\n    dataId.current += 1\n    setData((data) => [newItem, ...data])\n  }, [])\n\n  const onRemove = (targetId) => {\n    console.log(`${targetId}가 삭제되었습니다.`)\n    const newDiaryList = data.filter((item) => item.id !== targetId)\n    console.log(newDiaryList)\n    setData(newDiaryList)\n  }\n\n  const onEdit = (targetId, newContent) => {\n    setData(data.map((item) => (item.id === targetId ? { ...item, content: newContent } : item)))\n  }\n\n  //useMemo()\n  //emotion을 emoji 문자열 타입으로 넣어서 아래 getDiaryAnalysis 함수는 제대로 작동하지 않는다.\n  const getDiaryAnalysis = useMemo(() => {\n    if (data.length === 0) {\n      return { goodcount: 0, badCount: 0, goodRatio: 0 }\n    }\n    console.log('일기 분석 시작')\n\n    const goodCount = data.filter((it) => it.emotion >= 3).length\n    const badCount = data.length - goodCount\n    const goodRatio = (goodCount / data.length) * 100.0\n    return { goodCount, badCount, goodRatio }\n  }, [data.length])\n\n  //useMemo를 사용하게 되면 getDiaryAnalysis는 함수가 아니라 값을 반환하게 된다.\n  //따라서 getDiaryAnalysis()로 호출하면 function이 아니라는 에러가 발생한다.\n  const { goodCount, badCount, goodRatio } = getDiaryAnalysis\n\n  return (\n    <Fragment>\n      <DiaryEditor onCreate={onCreate} />\n      <div>전체 일기: {data.length} 개</div>\n      <div>기분 좋은 날: {goodCount}</div>\n      <div>기분 나쁜 날: {badCount}</div>\n      <div>기분 좋은 날 비율: {goodRatio}</div>\n      <DiaryList diaryList={data} onRemove={onRemove} onEdit={onEdit} />\n    </Fragment>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}