{"ast":null,"code":"var _jsxFileName = \"/Users/skylar/study/React/react-study/src/components/diaryItem.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DiaryItem = _ref => {\n  _s();\n\n  let {\n    id,\n    author,\n    content,\n    emotion,\n    created_date,\n    onRemove,\n    onEdit\n  } = _ref;\n  useEffect(() => {\n    console.log(`${id}번째 아이템 렌더`);\n  }); //수정 중인지 수정 중이 아닌지 체크할 isEdit state 생성\n\n  const [isEdit, setIsEdit] = useState(false); //toggleIsEdit이 호출되면 setIsEdit에서 인자로 받아온 not연산 !isEdit 반환\n\n  const toggleIsEdit = () => setIsEdit(!isEdit);\n\n  const [localContent, setLocalContent] = useState(content);\n  const localContentInput = useRef();\n\n  const handleRemove = () => {\n    if (window.confirm(`확인을 누르면 ${id} 번째 일기가 삭제됩니다.`)) {\n      onRemove(id);\n    }\n  };\n\n  const handleQuitEdit = () => {\n    setIsEdit(false);\n    setLocalContent(content);\n  };\n\n  const handleEdit = () => {\n    if (localContent.length < 5) {\n      localContentInput.current.focus();\n      return;\n    }\n\n    if (window.confirm(`확인을 누르면 ${id}번째 일기가 수정됩니다.`)) {\n      onEdit(id, localContent);\n      toggleIsEdit();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"DiaryItem\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"author\",\n      children: [\"\\uC791\\uC131\\uC790: \", author, \" | \\uC624\\uB298\\uC758 \\uAC10\\uC815: \", emotion]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"date\",\n      children: new Date(created_date).toLocaleString()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: isEdit ? /*#__PURE__*/_jsxDEV(Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n          ref: localContentInput,\n          value: localContent,\n          onChange: event => setLocalContent(event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Fragment, {\n        children: content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), isEdit ? /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleQuitEdit,\n        children: \"\\uC218\\uC815 \\uCDE8\\uC18C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleEdit,\n        children: \"\\uC218\\uC815 \\uC644\\uB8CC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRemove,\n        children: \"Remove\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleIsEdit,\n        children: \"Modification\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DiaryItem, \"svCiU5rg+6HJ06mIeOTwlpBX2Ck=\");\n\n_c = DiaryItem;\nexport default _c2 = /*#__PURE__*/React.memo(DiaryItem);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"DiaryItem\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/skylar/study/React/react-study/src/components/diaryItem.jsx"],"names":["React","Fragment","useEffect","useRef","useState","DiaryItem","id","author","content","emotion","created_date","onRemove","onEdit","console","log","isEdit","setIsEdit","toggleIsEdit","localContent","setLocalContent","localContentInput","handleRemove","window","confirm","handleQuitEdit","handleEdit","length","current","focus","Date","toLocaleString","event","target","value","memo"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect, useRef, useState } from 'react'\n\nconst DiaryItem = ({ id, author, content, emotion, created_date, onRemove, onEdit }) => {\n  useEffect(() => {\n    console.log(`${id}번째 아이템 렌더`)\n  })\n\n  //수정 중인지 수정 중이 아닌지 체크할 isEdit state 생성\n  const [isEdit, setIsEdit] = useState(false)\n\n  //toggleIsEdit이 호출되면 setIsEdit에서 인자로 받아온 not연산 !isEdit 반환\n  const toggleIsEdit = () => setIsEdit(!isEdit)\n\n  const [localContent, setLocalContent] = useState(content)\n\n  const localContentInput = useRef()\n\n  const handleRemove = () => {\n    if (window.confirm(`확인을 누르면 ${id} 번째 일기가 삭제됩니다.`)) {\n      onRemove(id)\n    }\n  }\n\n  const handleQuitEdit = () => {\n    setIsEdit(false)\n    setLocalContent(content)\n  }\n\n  const handleEdit = () => {\n    if (localContent.length < 5) {\n      localContentInput.current.focus()\n      return\n    }\n\n    if (window.confirm(`확인을 누르면 ${id}번째 일기가 수정됩니다.`)) {\n      onEdit(id, localContent)\n      toggleIsEdit()\n    }\n  }\n\n  return (\n    <div className=\"DiaryItem\">\n      <span className=\"author\">\n        작성자: {author} | 오늘의 감정: {emotion}\n      </span>\n      <div className=\"date\">{new Date(created_date).toLocaleString()}</div>\n      <hr />\n      <div className=\"content\">\n        {isEdit ? (\n          <Fragment>\n            <textarea\n              ref={localContentInput}\n              value={localContent}\n              onChange={(event) => setLocalContent(event.target.value)}\n            />\n          </Fragment>\n        ) : (\n          <Fragment>{content}</Fragment>\n        )}\n      </div>\n      {isEdit ? (\n        <Fragment>\n          <button onClick={handleQuitEdit}>수정 취소</button>\n          <button onClick={handleEdit}>수정 완료</button>\n        </Fragment>\n      ) : (\n        <Fragment>\n          <button onClick={handleRemove}>Remove</button>\n          <button onClick={toggleIsEdit}>Modification</button>\n        </Fragment>\n      )}\n    </div>\n  )\n}\n\nexport default React.memo(DiaryItem)\n"]},"metadata":{},"sourceType":"module"}